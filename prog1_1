#include <iostream>
#include <string>
#include <vector>
#include <fstream>

using namespace std;


int main(int argc, char *argv[])
{
	bool istate = true; // tells program what input and output to look out for (true = binary, false = ASCII)
	bool ostate = false;
	int counter = 0;
	if (argc > 1) //checks if any additional flags have been raised, and if so, appropriately changes the istate or ostate
	{
		counter = 1; // make sure this doesnt accidentally skip a flag
		while (counter < argc)
		{
			string comptemp = string(argv[counter]);
			if (comptemp == "-xin")
			{
				istate = false;
			}
			if (comptemp == "-bout")
			{
				ostate = true;
			}
			counter++;
		}
	}

	int ui = getchar();
	counter = 0;
	string useri = "";
	string usero = "";
	while (ui != EOF) // reads inputstream and fills input string with chosen input
	{
		string currentui(1, ui);
		useri.append(currentui);
		ui = getchar();
	}
	counter = 0;
	while (counter < useri.size()) // changes desired input into desired output
	{
		char val = useri.at(counter); 
		char val2;

		if (istate == ostate) // input becomes output if both states are the same
		{
			usero = useri;
		}
		else if (istate == true) // binary to ASCII output algorithm
		{
			int numval = +val;
			int remain = numval % 16;
			numval = numval - remain;
			numval = numval / 16;
			string hex = "";
			string conv = "";
			if (numval > 9)
			{
				switch (numval) {
				case 10: hex.append("a"); break;
				case 11: hex.append("b"); break;
				case 12: hex.append("c"); break;
				case 13: hex.append("d"); break;
				case 14: hex.append("e"); break;
				case 15: hex.append("f"); break;
				}

			}
			else
			{
				conv = std::to_string(numval);
				hex.append(conv);
			}
			if (remain > 9)
			{
				switch (remain) {
				case 10: hex.append("a"); break;
				case 11: hex.append("b"); break;
				case 12: hex.append("c"); break;
				case 13: hex.append("d"); break;
				case 14: hex.append("e"); break;
				case 15: hex.append("f"); break;
				}
			}
			else
			{
				conv = std::to_string(remain);
				hex.append(conv);
			}
			usero.append(hex);
			usero.append(" ");
			if (usero.size() % 48 == 0)
			{
				usero.append("\n");
			}

			counter++;
		}
		else // ASCII to binary 
		{
			val2 = useri.at(counter + 1);
			if ((((+val < 58) && (+val > 47)) || ((+val < 103) && (+val > 96))) && (((+val < 58) && (+val > 47)) || ((+val < 103) && (+val > 96))))
			{
				int dec1, dec2, findec;
				int num2 = +val;
				int num3 = +val2;
				if (+val > 58)
				{
					switch (num2)
					{
					case 97: dec1 = 60; break;
					case 98: dec1 = 66; break;
					case 99: dec1 = 72; break;
					case 100: dec1 = 78; break;
					case 101: dec1 = 84; break;
					case 102: dec1 = 90; break;
					}
				}
				else
				{
					num2 = val - '0';
					dec1 = num2 * 16;
				}
				if (+val2 > 58)
				{
					switch (num3)
					{
					case 97: dec2 = 10; break;
					case 98: dec2 = 11; break;
					case 99: dec2 = 12; break;
					case 100: dec2 = 13; break;
					case 101: dec2 = 14; break;
					case 102: dec2 = 15; break;
					}
				}
				else
				{
					num3 = val2 - '0';
					dec2 = num3;
				}
				findec = dec1 + dec2;
				char finchar = findec;
				cout << finchar << endl;
				string sfin(1, finchar);
				usero.append(sfin);
				counter = counter + 3;
			}
			else
			{
				cout << val << " is not a hexidecimal input." << endl;
				exit(1);
			}
		}
	}
	counter = 0;
	while (counter < usero.size()) //returns output string in characters
	{
		putchar(usero.at(counter));
		counter++;
	}
	return 0;
}
